//TA
//xor: a^b=0 then a==b and a^o=a, a^b=X then a^X=b
// ~ become one's complement
//low bit: the rightest 1; lowbit(x)=x&-x=x&(~x+1)

#include<stdio.h>

int main(void){
    int t;
    scanf("%d", &t);
    
    while(t--){
        int r;
        scanf("%d", &r);
        int range[r];
        
        for(int i=0; i<r; i++){
            scanf("%d", &range[i]);
        }
        
        long long xor=0;
        for(int i=0; i<r; i++){
            xor=xor^range[i];
        }
        //if int xor=-247483648, -x=247483648~ overflow
        
        long long lowbit= xor & (-xor);
        int ans1=0;
        
        for(int i=0; i<r; i++){
            if((lowbit & range[i])>0){ //only 1&1=1
                ans1=ans1^range[i]; //a^a^b=b
            }
        }
        
        long long ans2=ans1^xor;
        
        if(ans1<ans2){
            printf("%d %lld\n", ans1, ans2);
        }
        else{
            printf("%lld %d\n", ans2, ans1);
        }
    }
        
    
    
    return 0;
}

__________________________________
#include<stdio.h>

int main(void){
    int t;
    
    scanf("%d", &t);
    
    while(t--){
        int n;
        int ans[2];
        
        scanf("%d", &n);
        int a[n];
        
        for(int i=0; i<n; i++){
            scanf("%d", &a[i]);
        }
        
        int x=0;
        for(int i=0; i<n; i++){
            for(int j=0; j<n; j++){
                if(i!=j){
                    if (a[i]==a[j]){
                        break;
                    }
                }
                if(j==(n-1)){
                    ans[x]=a[i];
                    x++;
                }
                
            }
            if(x==2){
                break;
            }
                
        }
        
        if(ans[0]>ans[1]){
            printf("%d %d\n", ans[1], ans[0]);
        }
        else{
            printf("%d %d\n", ans[0], ans[1]);
        }
    }
    
    return 0;
}
