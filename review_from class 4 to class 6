week 4

//int strlen() vs int sizeof(): 
strlen is the lentgh of the word(counted by letter)
sizeof is the bytes the word use

//void fflush(stdin)~clear the buffer zone （緩衝區）

//scanf("%[XYZ]", x); only read the XYZ(do not need to use %s); scanf("%[^XYZ]") while find XYZ stop reading 
//scanf("%*d", &x); the %d number will not store in x since it has *(restrain)
//scanf("%lld(/`A`)/ ~I__I", &T[i]); (/`A`)/ ~I__I will not be counted

//printf("%e", x)~%e is for scientific notation(科學符號), ex: 1499.990~1.499990e+3
//printf("%12.3e", x)~ have 12 spaces before decimal point, the precision only to 3 after decimal point and will round up; ex: 1.499990e+3~ 1.500e+3
//%010.2f~the unused space be filled with 0; %+4.2f(%-4.2f) the positive (negative) sign should be indicated 
//%*.*s~ 1:*, the space; 2:*, the precision 

// int a[10][10] = {0}; initialize the array with filling 0
 
//#define SPEED 0.083~~ define all of the SPEED is 0.083

//int i ='A'; printf("%c: %3d", i, i); c字元

//EOF:end of file; 
#include<stdio.h>
int main(void){
 while(scanf("%d%d", &x, &y) ==2){ //the number of input is two
 printf("x=%d y=%d/n", x, y);
 }
return 0;}
//


____________________________________
week 5

//char getchar(), char putchar()
#include<stdio.h>
#include<ctype.h>
int main(void)P

char ch;
while((ch=getchar()) != '\n'){
putchar(tolower(ch));
}
putchar('\n');

return 0;
}
//

//boolin
x>1~if true; x>1==1(int); else false; x>1==0(int)

//
find N%x==a; N%y==b; N%z==c;
then 
for(int i=0; i<extent; i++){
 if(i%x==a && i%y==b && i%z==c){
  Ans=i;
  break;
 }
 //
 
 ____________________________________
week 6

//hanoi
#include <stdio.h>
void hanoi(char from, char to, char buffer, int n_disks);

int main(void)
{
	int n;
	printf("Number of disks: ");
	scanf("%d", &n);
	hanoi('1', '3', '2', n);

	return 0;
}

/* move n disks from a to b using c as a buffer */
void hanoi(char a, char b, char c, int n)
{
	if (n == 0) {		
		return;
	}
	hanoi(a, c, b, n-1); /* move the top n-1 disks from a to c */
	printf("Move the top disk from Tower %c to Tower %c\n", a, b); /* move the last disk from a to b */
	hanoi(c, b, a, n-1); /* move the top n-1 disks from c to b */
}
//







